{"version":3,"file":"static/js/158.265dee85.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","../node_modules/reselect/es/defaultMemoize.js","../node_modules/reselect/es/index.js","components/redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","components/pages/ContactsBookPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"formBox\":\"ContactForm_formBox__cXiHe\",\"formInput\":\"ContactForm_formInput__GszVU\",\"formButton\":\"ContactForm_formButton__TN6Jq\"};","// Cache implementation based on Erik Rasmussen's `lru-memoize`:\n// https://github.com/erikras/lru-memoize\nvar NOT_FOUND = 'NOT_FOUND';\n\nfunction createSingletonCache(equals) {\n  var entry;\n  return {\n    get: function get(key) {\n      if (entry && equals(entry.key, key)) {\n        return entry.value;\n      }\n\n      return NOT_FOUND;\n    },\n    put: function put(key, value) {\n      entry = {\n        key: key,\n        value: value\n      };\n    },\n    getEntries: function getEntries() {\n      return entry ? [entry] : [];\n    },\n    clear: function clear() {\n      entry = undefined;\n    }\n  };\n}\n\nfunction createLruCache(maxSize, equals) {\n  var entries = [];\n\n  function get(key) {\n    var cacheIndex = entries.findIndex(function (entry) {\n      return equals(key, entry.key);\n    }); // We found a cached entry\n\n    if (cacheIndex > -1) {\n      var entry = entries[cacheIndex]; // Cached entry not at top of cache, move it to the top\n\n      if (cacheIndex > 0) {\n        entries.splice(cacheIndex, 1);\n        entries.unshift(entry);\n      }\n\n      return entry.value;\n    } // No entry found in cache, return sentinel\n\n\n    return NOT_FOUND;\n  }\n\n  function put(key, value) {\n    if (get(key) === NOT_FOUND) {\n      // TODO Is unshift slow?\n      entries.unshift({\n        key: key,\n        value: value\n      });\n\n      if (entries.length > maxSize) {\n        entries.pop();\n      }\n    }\n  }\n\n  function getEntries() {\n    return entries;\n  }\n\n  function clear() {\n    entries = [];\n  }\n\n  return {\n    get: get,\n    put: put,\n    getEntries: getEntries,\n    clear: clear\n  };\n}\n\nexport var defaultEqualityCheck = function defaultEqualityCheck(a, b) {\n  return a === b;\n};\nexport function createCacheKeyComparator(equalityCheck) {\n  return function areArgumentsShallowlyEqual(prev, next) {\n    if (prev === null || next === null || prev.length !== next.length) {\n      return false;\n    } // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n\n\n    var length = prev.length;\n\n    for (var i = 0; i < length; i++) {\n      if (!equalityCheck(prev[i], next[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n}\n// defaultMemoize now supports a configurable cache size with LRU behavior,\n// and optional comparison of the result value with existing values\nexport function defaultMemoize(func, equalityCheckOrOptions) {\n  var providedOptions = typeof equalityCheckOrOptions === 'object' ? equalityCheckOrOptions : {\n    equalityCheck: equalityCheckOrOptions\n  };\n  var _providedOptions$equa = providedOptions.equalityCheck,\n      equalityCheck = _providedOptions$equa === void 0 ? defaultEqualityCheck : _providedOptions$equa,\n      _providedOptions$maxS = providedOptions.maxSize,\n      maxSize = _providedOptions$maxS === void 0 ? 1 : _providedOptions$maxS,\n      resultEqualityCheck = providedOptions.resultEqualityCheck;\n  var comparator = createCacheKeyComparator(equalityCheck);\n  var cache = maxSize === 1 ? createSingletonCache(comparator) : createLruCache(maxSize, comparator); // we reference arguments instead of spreading them for performance reasons\n\n  function memoized() {\n    var value = cache.get(arguments);\n\n    if (value === NOT_FOUND) {\n      // @ts-ignore\n      value = func.apply(null, arguments);\n\n      if (resultEqualityCheck) {\n        var entries = cache.getEntries();\n        var matchingEntry = entries.find(function (entry) {\n          return resultEqualityCheck(entry.value, value);\n        });\n\n        if (matchingEntry) {\n          value = matchingEntry.value;\n        }\n      }\n\n      cache.put(arguments, value);\n    }\n\n    return value;\n  }\n\n  memoized.clearCache = function () {\n    return cache.clear();\n  };\n\n  return memoized;\n}","import { defaultMemoize, defaultEqualityCheck } from './defaultMemoize';\nexport { defaultMemoize, defaultEqualityCheck };\n\nfunction getDependencies(funcs) {\n  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;\n\n  if (!dependencies.every(function (dep) {\n    return typeof dep === 'function';\n  })) {\n    var dependencyTypes = dependencies.map(function (dep) {\n      return typeof dep === 'function' ? \"function \" + (dep.name || 'unnamed') + \"()\" : typeof dep;\n    }).join(', ');\n    throw new Error(\"createSelector expects all input-selectors to be functions, but received the following types: [\" + dependencyTypes + \"]\");\n  }\n\n  return dependencies;\n}\n\nexport function createSelectorCreator(memoize) {\n  for (var _len = arguments.length, memoizeOptionsFromArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    memoizeOptionsFromArgs[_key - 1] = arguments[_key];\n  }\n\n  var createSelector = function createSelector() {\n    for (var _len2 = arguments.length, funcs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      funcs[_key2] = arguments[_key2];\n    }\n\n    var _recomputations = 0;\n\n    var _lastResult; // Due to the intricacies of rest params, we can't do an optional arg after `...funcs`.\n    // So, start by declaring the default value here.\n    // (And yes, the words 'memoize' and 'options' appear too many times in this next sequence.)\n\n\n    var directlyPassedOptions = {\n      memoizeOptions: undefined\n    }; // Normally, the result func or \"output selector\" is the last arg\n\n    var resultFunc = funcs.pop(); // If the result func is actually an _object_, assume it's our options object\n\n    if (typeof resultFunc === 'object') {\n      directlyPassedOptions = resultFunc; // and pop the real result func off\n\n      resultFunc = funcs.pop();\n    }\n\n    if (typeof resultFunc !== 'function') {\n      throw new Error(\"createSelector expects an output function after the inputs, but received: [\" + typeof resultFunc + \"]\");\n    } // Determine which set of options we're using. Prefer options passed directly,\n    // but fall back to options given to createSelectorCreator.\n\n\n    var _directlyPassedOption = directlyPassedOptions,\n        _directlyPassedOption2 = _directlyPassedOption.memoizeOptions,\n        memoizeOptions = _directlyPassedOption2 === void 0 ? memoizeOptionsFromArgs : _directlyPassedOption2; // Simplifying assumption: it's unlikely that the first options arg of the provided memoizer\n    // is an array. In most libs I've looked at, it's an equality function or options object.\n    // Based on that, if `memoizeOptions` _is_ an array, we assume it's a full\n    // user-provided array of options. Otherwise, it must be just the _first_ arg, and so\n    // we wrap it in an array so we can apply it.\n\n    var finalMemoizeOptions = Array.isArray(memoizeOptions) ? memoizeOptions : [memoizeOptions];\n    var dependencies = getDependencies(funcs);\n    var memoizedResultFunc = memoize.apply(void 0, [function recomputationWrapper() {\n      _recomputations++; // apply arguments instead of spreading for performance.\n\n      return resultFunc.apply(null, arguments);\n    }].concat(finalMemoizeOptions)); // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.\n\n    var selector = memoize(function dependenciesChecker() {\n      var params = [];\n      var length = dependencies.length;\n\n      for (var i = 0; i < length; i++) {\n        // apply arguments instead of spreading and mutate a local list of params for performance.\n        // @ts-ignore\n        params.push(dependencies[i].apply(null, arguments));\n      } // apply arguments instead of spreading for performance.\n\n\n      _lastResult = memoizedResultFunc.apply(null, params);\n      return _lastResult;\n    });\n    Object.assign(selector, {\n      resultFunc: resultFunc,\n      memoizedResultFunc: memoizedResultFunc,\n      dependencies: dependencies,\n      lastResult: function lastResult() {\n        return _lastResult;\n      },\n      recomputations: function recomputations() {\n        return _recomputations;\n      },\n      resetRecomputations: function resetRecomputations() {\n        return _recomputations = 0;\n      }\n    });\n    return selector;\n  }; // @ts-ignore\n\n\n  return createSelector;\n}\nexport var createSelector = /* #__PURE__ */createSelectorCreator(defaultMemoize);\n// Manual definition of state and output arguments\nexport var createStructuredSelector = function createStructuredSelector(selectors, selectorCreator) {\n  if (selectorCreator === void 0) {\n    selectorCreator = createSelector;\n  }\n\n  if (typeof selectors !== 'object') {\n    throw new Error('createStructuredSelector expects first argument to be an object ' + (\"where each property is a selector, instead received a \" + typeof selectors));\n  }\n\n  var objectKeys = Object.keys(selectors);\n  var resultSelector = selectorCreator( // @ts-ignore\n  objectKeys.map(function (key) {\n    return selectors[key];\n  }), function () {\n    for (var _len3 = arguments.length, values = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      values[_key3] = arguments[_key3];\n    }\n\n    return values.reduce(function (composition, value, index) {\n      composition[objectKeys[index]] = value;\n      return composition;\n    }, {});\n  });\n  return resultSelector;\n};","import { createSelector } from '@reduxjs/toolkit';\n\nexport const getStoreContacts = state => state.contacts.items;\nexport const getStoreFilter = state => state.filter;\nexport const selectorFilteredContacts = createSelector(\n  [getStoreContacts, getStoreFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n\nexport const selectIsContactsExist = state =>\n  Boolean(getStoreContacts(state).length);\n\n//const isContactsExist = useSelector((state) => Boolean(state.contacts.length));\n","\n\nimport s from './ContactForm.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { nanoid } from '@reduxjs/toolkit';\nimport { getStoreContacts } from 'components/redux/contacts/selectors';\nimport {  addContacts } from 'components/redux/contacts/contactsOperation';\n\n\nconst ContactForm = () => {\n\n const contacts = useSelector(getStoreContacts); \n  const dispatch = useDispatch();\n\n const handleSubmit = event => {\n  event.preventDefault();\n  const form = event.target; \n\n   const name = form.name.value; \n   const number = form.number.value; \n \n  const isNameOnTheList =contacts.some(\n    el => el.name.toLowerCase() === name.toLowerCase()\n  );\n   \n  if (isNameOnTheList) {\n    alert(`A contact ${name} with the same number already exists.`);\n  } else {\n     const newContact = {\n      name: name,\n      number: number,\n       id: nanoid(),\n       \n    };  \n    \n    dispatch(addContacts(newContact))\n   \n   };\n   form.reset();\n    \n};\n\n    return (\n      \n      <form className={s.formBox} onSubmit={handleSubmit}>\n          \n        <label>Name</label>\n        <input\n          className={s.formInput}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n        <label>Number</label>\n        <input\n          className={s.formInput}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n        <button className={s.formButton} type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    );\n  }\n\n\nexport default ContactForm;\n\n\n ","// extracted by mini-css-extract-plugin\nexport default {\"contactList\":\"ContactList_contactList__UFVCg\",\"contactItem\":\"ContactList_contactItem__ppNQ5\",\"contactBtnDel\":\"ContactList_contactBtnDel__AAE3D\"};","\n\nimport s from './ContactList.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {  selectorFilteredContacts } from 'components/redux/contacts/selectors';\nimport { removeContacts} from 'components/redux/contacts/contactsOperation';\n\nconst ContactList = () => {\n  const dispatch = useDispatch();\n  const filterContactsByName = useSelector(selectorFilteredContacts);\n\n  return (\n   \n    <ul className={s.contactList}>\n      { \n        filterContactsByName.map(({ id, name, number }) => (\n          <li key={id} className={s.contactItem}>\n            <span>\n              {name}: {number}\n            </span>\n            <button\n              className={s.contactBtnDel}\n              type=\"button\"\n              onClick={() =>\n                dispatch(removeContacts(id))}> \n              Delete\n            </button>\n          </li>\n        ))}\n    </ul>\n    \n  );\n\n};\n\nexport default ContactList;\n\n\n\n     \n    \n","// extracted by mini-css-extract-plugin\nexport default {\"filterBox\":\"Filter_filterBox__A-UPt\",\"filterText\":\"Filter_filterText__QGy-k\",\"filterInput\":\"Filter_filterInput__1Cysk\"};","\nimport s from './Filter.module.css';\nimport { useDispatch } from 'react-redux';\nimport { setFilter}  from 'components/redux/contacts/filterSlice';\n\nconst Filter = () => {\n   const dispatch = useDispatch();\n  return (\n    <div className={s.filterBox}>\n      <label className={s.filterText}>Find contacts by name</label>\n      <input\n        className={s.filterInput}\n        type=\"text\"\n        onChange={(event) => {\n         dispatch(setFilter(event)) ;\n        }}\n      />\n    </div>\n  );\n};\n\n\nexport default Filter;\n","\n\nimport ContactForm from \"components/ContactForm/ContactForm\";\nimport ContactList from \"components/ContactList/ContactList\";\nimport Filter from \"components/Filter/Filter\";\nimport { useEffect } from \"react\";\nimport { getContacts} from \"components/redux/contacts/contactsOperation\";\nimport {  useDispatch, useSelector } from \"react-redux\"; \n\n\n\nconst ContactsBookPage = () => {\n  const dispatch = useDispatch();\n  \n  const isLoading = useSelector(state => state.contacts.isLoading);\n  const error = useSelector(state => state.contacts.error);\n\n   // const isContactsExist = useSelector(selectIsContactsExist)\n   // const isUserExist = useSelector(state => state.auth.localId)\n    \n  \n/*  useEffect(() => {\n !isContactsExist && isUserExist && \n    dispatch(getContacts());\n  \n}, [dispatch, isUserExist, isContactsExist]); */\n  useEffect(() => {\n   dispatch(getContacts());\n}, [dispatch]);\n\n \n    \n  return (\n      \n    <>\n      <h1 style={{ textAlign: 'center' }}>Phonebook</h1>\n      <ContactForm />\n      <Filter />\n      <h2 style={{ textAlign: 'center' }}>Contacts list</h2>\n      <ContactList />\n      {isLoading && !error && <p>Contacts...</p>}\n    </>\n  )\n      \n \n};\n\nexport default ContactsBookPage;\n\n\n\n\n\n "],"names":["NOT_FOUND","defaultEqualityCheck","a","b","defaultMemoize","func","equalityCheckOrOptions","providedOptions","equalityCheck","_providedOptions$equa","_providedOptions$maxS","maxSize","resultEqualityCheck","comparator","prev","next","length","i","createCacheKeyComparator","cache","equals","entry","get","key","value","put","getEntries","clear","undefined","createSingletonCache","entries","cacheIndex","findIndex","splice","unshift","pop","createLruCache","memoized","arguments","apply","matchingEntry","find","clearCache","getDependencies","funcs","dependencies","Array","isArray","every","dep","dependencyTypes","map","name","join","Error","createSelectorCreator","memoize","_len","memoizeOptionsFromArgs","_key","createSelector","_len2","_key2","_lastResult","_recomputations","directlyPassedOptions","memoizeOptions","resultFunc","_directlyPassedOption","_directlyPassedOption2","finalMemoizeOptions","memoizedResultFunc","concat","selector","params","push","Object","assign","lastResult","recomputations","resetRecomputations","getStoreContacts","state","contacts","items","selectorFilteredContacts","filter","contact","toLowerCase","includes","useSelector","dispatch","useDispatch","className","s","onSubmit","event","preventDefault","form","target","number","some","el","alert","newContact","id","nanoid","addContacts","reset","type","pattern","title","required","filterContactsByName","onClick","removeContacts","onChange","setFilter","isLoading","error","useEffect","getContacts","style","textAlign"],"sourceRoot":""}